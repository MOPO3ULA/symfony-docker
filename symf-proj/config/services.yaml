parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

#start Services
    App\Controller\SecurityController:
        autowire: true
        public: false

    App\Controller\CompetitionController:
        autowire: true
        public: false
        arguments:
            $logger: '@monolog.logger.default'

    App\Service\RegisterUserService:
        autowire: true
        public: false
        arguments:
            $logger: '@monolog.logger.registration'

    App\Service\MailServices\Base\MailerService:
        autowire: true
        public: false
        arguments:
            $logger: '@monolog.logger.mailer'

    App\Service\MailServices\RegistrationMailService:
        autowire: true
        public: false
        arguments:
            $logger: '@monolog.logger.mailer'

    App\Service\CompetitionGenerator:
        autowire: true
        public: false
        arguments:
            $logger: '@monolog.logger.submit_beat'

#end Services

#Admin content
    admin.users:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Main', label: sonata.users.table }
    admin.samples:
        class: App\Admin\SampleAdmin
        arguments: [~, App\Entity\Sample, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, group: 'Main', label: sonata.samples.table }

#end Admin content

